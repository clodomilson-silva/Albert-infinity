import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/trainsmart_models.dart';

/// Exce√ß√£o personalizada para erros da API TrainSmart
class TrainSmartApiException implements Exception {
  final String message;
  final int? statusCode;
  final String? details;

  TrainSmartApiException(this.message, {this.statusCode, this.details});

  @override
  String toString() {
    if (details != null) {
      return 'TrainSmartApiException: $message\nDetalhes: $details';
    }
    return 'TrainSmartApiException: $message';
  }
}

/// Servi√ßo para integra√ß√£o com a API TrainSmart
class TrainSmartApiService {
  static const String baseUrl = 'https://trainsmart-api.onrender.com';
  static TrainSmartApiService? _instance;

  static TrainSmartApiService get instance {
    _instance ??= TrainSmartApiService._internal();
    return _instance!;
  }

  TrainSmartApiService._internal();

  // Cache para exerc√≠cios
  List<TrainSmartExercise>? _cachedExercises;
  DateTime? _lastCacheUpdate;
  final Duration _cacheTimeout = const Duration(minutes: 30);

  // Token de autentica√ß√£o
  String? _accessToken;
  bool get isAuthenticated => _accessToken != null;

  bool get _shouldUpdateCache {
    if (_lastCacheUpdate == null) return true;
    return DateTime.now().difference(_lastCacheUpdate!) > _cacheTimeout;
  }

  /// Headers padr√£o para requisi√ß√µes
  Map<String, String> get _headers => {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    if (_accessToken != null) 'Authorization': 'Bearer $_accessToken',
  };

  /// Tratamento de erros HTTP
  void _handleHttpError(http.Response response) {
    if (response.statusCode >= 200 && response.statusCode < 300) {
      return; // Sucesso
    }

    String errorMessage;
    String? details;

    try {
      final errorBody = jsonDecode(response.body);
      errorMessage = errorBody['detail'] ?? errorBody['message'] ?? 'Erro desconhecido';
      details = errorBody.toString();
    } catch (e) {
      errorMessage = 'Erro HTTP ${response.statusCode}';
      details = response.body;
    }

    throw TrainSmartApiException(errorMessage, statusCode: response.statusCode, details: details);
  }

  // ========== AUTENTICA√á√ÉO ==========

  /// Fazer login na API
  Future<AuthResponse> login(LoginCredentials credentials) async {
    try {
      print('üîê Fazendo login na TrainSmart API...');

      final response = await http.post(
        Uri.parse('$baseUrl/auth/login'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(credentials.toJson()),
      );

      _handleHttpError(response);

      final authResponse = AuthResponse.fromJson(jsonDecode(response.body));
      _accessToken = authResponse.accessToken;

      print('‚úÖ Login realizado com sucesso!');
      return authResponse;
    } catch (e) {
      print('‚ùå Erro no login: $e');
      rethrow;
    }
  }

  /// Registrar novo usu√°rio
  Future<TrainSmartUser> register(RegisterData registerData) async {
    try {
      print('üìù Registrando novo usu√°rio...');

      final response = await http.post(
        Uri.parse('$baseUrl/auth/register'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(registerData.toJson()),
      );

      _handleHttpError(response);

      final userData = TrainSmartUser.fromJson(jsonDecode(response.body));
      print('‚úÖ Usu√°rio registrado com sucesso!');
      return userData;
    } catch (e) {
      print('‚ùå Erro no registro: $e');
      rethrow;
    }
  }

  /// Fazer logout
  void logout() {
    _accessToken = null;
    print('üö™ Logout realizado');
  }

  // ========== STATUS E INFORMA√á√ïES ==========

  /// Obter informa√ß√µes da API
  Future<ApiStatus> getApiInfo() async {
    try {
      final response = await http.get(Uri.parse(baseUrl), headers: _headers);

      _handleHttpError(response);
      return ApiStatus.fromJson(jsonDecode(response.body));
    } catch (e) {
      print('‚ùå Erro ao obter informa√ß√µes da API: $e');
      rethrow;
    }
  }

  /// Health check da API
  Future<HealthStatus> getHealthStatus() async {
    try {
      final response = await http.get(Uri.parse('$baseUrl/health'), headers: _headers);

      _handleHttpError(response);
      return HealthStatus.fromJson(jsonDecode(response.body));
    } catch (e) {
      print('‚ùå Erro no health check: $e');
      rethrow;
    }
  }

  // ========== EXERC√çCIOS ==========

  /// Listar exerc√≠cios (p√∫blico)
  Future<List<TrainSmartExercise>> getExercises({
    String? grupoMuscular,
    String? equipamento,
    int skip = 0,
    int limit = 100,
  }) async {
    try {
      print('üèãÔ∏è Carregando exerc√≠cios da TrainSmart API...');

      // Usar cache se dispon√≠vel e n√£o expirado
      if (_cachedExercises != null &&
          !_shouldUpdateCache &&
          grupoMuscular == null &&
          equipamento == null) {
        print('üìã Usando cache de exerc√≠cios (${_cachedExercises!.length} exerc√≠cios)');
        return _cachedExercises!;
      }

      // Construir URL com par√¢metros
      final uri = Uri.parse('$baseUrl/exercicios').replace(
        queryParameters: {
          if (grupoMuscular != null) 'grupo_muscular': grupoMuscular,
          if (equipamento != null) 'equipamento': equipamento,
          'skip': skip.toString(),
          'limit': limit.toString(),
        },
      );

      final response = await http.get(uri, headers: _headers);
      _handleHttpError(response);

      final List<dynamic> exercisesJson = jsonDecode(response.body);
      final exercises = exercisesJson.map((json) => TrainSmartExercise.fromJson(json)).toList();

      // Atualizar cache se for uma busca completa
      if (grupoMuscular == null && equipamento == null) {
        _cachedExercises = exercises;
        _lastCacheUpdate = DateTime.now();
      }

      print('‚úÖ ${exercises.length} exerc√≠cios carregados com sucesso!');
      return exercises;
    } catch (e) {
      print('‚ùå Erro ao carregar exerc√≠cios: $e');
      rethrow;
    }
  }

  /// Buscar exerc√≠cio por ID
  Future<TrainSmartExercise> getExerciseById(int id) async {
    try {
      print('üîç Buscando exerc√≠cio ID: $id');

      final response = await http.get(Uri.parse('$baseUrl/exercicios/$id'), headers: _headers);

      _handleHttpError(response);

      final exercise = TrainSmartExercise.fromJson(jsonDecode(response.body));
      print('‚úÖ Exerc√≠cio encontrado: ${exercise.nome}');
      return exercise;
    } catch (e) {
      print('‚ùå Erro ao buscar exerc√≠cio: $e');
      rethrow;
    }
  }

  /// Criar novo exerc√≠cio (requer autentica√ß√£o de admin)
  Future<TrainSmartExercise> createExercise(ExerciseCreateData exerciseData) async {
    if (!isAuthenticated) {
      throw TrainSmartApiException('Autentica√ß√£o necess√°ria para criar exerc√≠cios');
    }

    try {
      print('‚ûï Criando novo exerc√≠cio: ${exerciseData.nome}');

      final response = await http.post(
        Uri.parse('$baseUrl/exercicios'),
        headers: _headers,
        body: jsonEncode(exerciseData.toJson()),
      );

      _handleHttpError(response);

      final exercise = TrainSmartExercise.fromJson(jsonDecode(response.body));

      // Invalidar cache
      _cachedExercises = null;

      print('‚úÖ Exerc√≠cio criado com sucesso!');
      return exercise;
    } catch (e) {
      print('‚ùå Erro ao criar exerc√≠cio: $e');
      rethrow;
    }
  }

  /// Atualizar exerc√≠cio (requer autentica√ß√£o de admin)
  Future<TrainSmartExercise> updateExercise(int id, ExerciseCreateData exerciseData) async {
    if (!isAuthenticated) {
      throw TrainSmartApiException('Autentica√ß√£o necess√°ria para atualizar exerc√≠cios');
    }

    try {
      print('‚úèÔ∏è Atualizando exerc√≠cio ID: $id');

      final response = await http.put(
        Uri.parse('$baseUrl/exercicios/$id'),
        headers: _headers,
        body: jsonEncode(exerciseData.toJson()),
      );

      _handleHttpError(response);

      final exercise = TrainSmartExercise.fromJson(jsonDecode(response.body));

      // Invalidar cache
      _cachedExercises = null;

      print('‚úÖ Exerc√≠cio atualizado com sucesso!');
      return exercise;
    } catch (e) {
      print('‚ùå Erro ao atualizar exerc√≠cio: $e');
      rethrow;
    }
  }

  /// Excluir exerc√≠cio (requer autentica√ß√£o de admin)
  Future<void> deleteExercise(int id) async {
    if (!isAuthenticated) {
      throw TrainSmartApiException('Autentica√ß√£o necess√°ria para excluir exerc√≠cios');
    }

    try {
      print('üóëÔ∏è Excluindo exerc√≠cio ID: $id');

      final response = await http.delete(Uri.parse('$baseUrl/exercicios/$id'), headers: _headers);

      _handleHttpError(response);

      // Invalidar cache
      _cachedExercises = null;

      print('‚úÖ Exerc√≠cio exclu√≠do com sucesso!');
    } catch (e) {
      print('‚ùå Erro ao excluir exerc√≠cio: $e');
      rethrow;
    }
  }

  // ========== UTILIT√ÅRIOS ==========

  /// Listar grupos musculares dispon√≠veis
  Future<List<String>> getGruposMusculares() async {
    try {
      print('üí™ Carregando grupos musculares...');

      final response = await http.get(
        Uri.parse('$baseUrl/exercicios/grupos-musculares'),
        headers: _headers,
      );

      _handleHttpError(response);

      final List<dynamic> grupos = jsonDecode(response.body);
      final gruposMusculares = grupos.cast<String>();

      print('‚úÖ ${gruposMusculares.length} grupos musculares carregados');
      return gruposMusculares;
    } catch (e) {
      print('‚ùå Erro ao carregar grupos musculares: $e');
      rethrow;
    }
  }

  /// Listar equipamentos dispon√≠veis
  Future<List<String>> getEquipamentos() async {
    try {
      print('üèãÔ∏è Carregando equipamentos...');

      final response = await http.get(
        Uri.parse('$baseUrl/exercicios/equipamentos'),
        headers: _headers,
      );

      _handleHttpError(response);

      final List<dynamic> equipamentos = jsonDecode(response.body);
      final listaEquipamentos = equipamentos.cast<String>();

      print('‚úÖ ${listaEquipamentos.length} equipamentos carregados');
      return listaEquipamentos;
    } catch (e) {
      print('‚ùå Erro ao carregar equipamentos: $e');
      rethrow;
    }
  }

  // ========== UTILIT√ÅRIOS DE CACHE ==========

  /// Limpar cache de exerc√≠cios
  void clearCache() {
    _cachedExercises = null;
    _lastCacheUpdate = null;
    print('üßπ Cache limpo');
  }

  /// For√ßar atualiza√ß√£o do cache
  Future<List<TrainSmartExercise>> refreshCache() async {
    clearCache();
    return await getExercises();
  }

  // ========== STATUS E ESTAT√çSTICAS ==========

  /// Obter estat√≠sticas do cache
  Map<String, dynamic> getCacheStats() {
    return {
      'has_cache': _cachedExercises != null,
      'cache_size': _cachedExercises?.length ?? 0,
      'last_update': _lastCacheUpdate?.toIso8601String(),
      'cache_age_minutes': _lastCacheUpdate != null
          ? DateTime.now().difference(_lastCacheUpdate!).inMinutes
          : null,
      'should_update': _shouldUpdateCache,
    };
  }
}
